# This dockerfile allows you to build an environment for cross-compiling packages for the Jetson.
# It is based on the SDK generated by yocto.
# To be able to build this dockerfile, you have to run `bitbake mr-nadir-image -c populate_sdk` 
# in a yocto environment. This will generate a .sh file in build/tmp/deploy/sdk/ which then 
# can be used to build this dockerfile.
#
# THere are several fixes needed to make this work, for example the paths in some cmake files
# need to be fixed. This is done in the dockerfile.
# Additional yocto packages are added to the image in mr-nadir-image.bb (see meta-nadir/recipes-core/images/mr-nadir-image.bb)
# And there is a nadir-image-sdk-support package which adds some additional scripts to the SDK.
#
# To build: 
# $ docker build . -t yocto-ros-cross-sdk:latest
# 
# To run:
# $ docker run -it --rm -v $(pwd):/workdir yocto-ros-cross-sdk:latest
# 
# Whre $(pwd) is the path to the root of the nadir-os repo.
# You can also pass a command to the docker run command. There is a script in the PATH called cross-build which
# allows you to build a single package. For example:
# $ docker run -it --rm -v $(pwd):/workdir yocto-ros-cross-sdk:latest cross-build nadir_commander



FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive
RUN apt update && \
    apt install -y \
        python3 \
        xz-utils \
        perl \
        findutils \
        file \
        vim \
        nano \
        git \
        less \
        sudo \
        wget \
        curl \
        \
        && \
    rm -rf /var/lib/apt/lists/*
    

# Copy the SDK
RUN mkdir -p /work/sdk
ARG CURRENT_DIR="."
COPY artifacts/tmp/deploy/sdk/ /work/sdk

# Install the SDK
RUN sh /work/sdk/*-toolchain*.sh \
    -y -d /opt/sdk && \
    rm -rf /opt/sdk/sysroots/*-linux/usr/lib/openssl/ptest/test && \
    rm /work -rf

# Fix paths in some cmake files
RUN cd /opt/sdk \
    echo "#!/bin/bash" > /tmp/fix_paths.sh && \
    echo "set -x" >> /tmp/fix_paths.sh && \
    echo ". /opt/sdk/environment-setup-*-linux*" >> /tmp/fix_paths.sh && \
    echo 'grep -rl "FIXMESTAGINGDIRHOST" /opt/sdk |  xargs sed -i "s#FIXMESTAGINGDIRHOST#${OECORE_NATIVE_SYSROOT}#g"' >> /tmp/fix_paths.sh && \
    echo 'grep -rl "/usr/lib/libpython3.10.so" /opt/sdk |  xargs sed -i "s#/.*/.*-linux.*/.*/recipe-sysroot/usr/lib/libpython3.10.so#${SDKTARGETSYSROOT}/usr/lib/libpython3.10.so#g"' >> /tmp/fix_paths.sh && \
    echo "set +x" >> /tmp/fix_paths.sh && \
    chmod +x /tmp/fix_paths.sh && \
    /tmp/fix_paths.sh && \
    rm /tmp/fix_paths.sh
    
    
# create entrypoint and cross-build script
RUN echo "#!/bin/bash" > /entrypoint.sh && \
    echo "source /opt/sdk/environment-setup-*-linux*" >> /entrypoint.sh && \    
    echo "if [ -z \"\$1\" ]" >> /entrypoint.sh && \
    echo "then" >> /entrypoint.sh && \
    echo "    . /opt/sdk/sysroots/x86_64-oesdk-linux/etc/profile.d/ros.sh" >> /entrypoint.sh && \
    echo "    echo \"Welcome to the SDK build environment, you now can run colcon like normal.\"" >> /entrypoint.sh && \
    echo "    echo \"We already called '. /opt/sdk/sysroots/x86_64-oesdk-linux/etc/profile.d/ros.sh' for you.\"" >> /entrypoint.sh && \
    echo "    echo \"\"" >> /entrypoint.sh && \
    echo "    exec bash" >> /entrypoint.sh && \
    echo "    exit 0" >> /entrypoint.sh && \
    echo "fi" >> /entrypoint.sh && \
    echo "exec \"\$@\"" >> /entrypoint.sh && \
    chmod +x /entrypoint.sh 

# add user sdkbuild
RUN useradd -ms /bin/bash sdkbuild
# allow sudo without password
RUN echo "sdkbuild ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# RUN  . /opt/sdk/environment-setup-*-linux && \   
#      python3 -m ensurepip --upgrade && \
#      python3 -m pip install vcstool

USER sdkbuild

WORKDIR /workdir
ENTRYPOINT ["/entrypoint.sh"]